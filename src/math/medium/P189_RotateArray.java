package math.medium;

/**
 * 轮转数组
 * <a href="https://leetcode.cn/problems/rotate-array/">🔗</a>
 *
 * 给你一个数组，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。
 *
 *  
 *
 * 示例 1:
 *
 * 输入: nums = [1,2,3,4,5,6,7], k = 3
 * 输出: [5,6,7,1,2,3,4]
 * 解释:
 * 向右轮转 1 步: [7,1,2,3,4,5,6]
 * 向右轮转 2 步: [6,7,1,2,3,4,5]
 * 向右轮转 3 步: [5,6,7,1,2,3,4]
 * 示例 2:
 *
 * 输入：nums = [-1,-100,3,99], k = 2
 * 输出：[3,99,-1,-100]
 * 解释:
 * 向右轮转 1 步: [99,-1,-100,3]
 * 向右轮转 2 步: [3,99,-1,-100]
 *  
 *
 * 提示：
 *
 * 1 <= nums.length <= 105
 * -231 <= nums[i] <= 231 - 1
 * 0 <= k <= 105
 *  
 *
 * 进阶：
 *
 * 尽可能想出更多的解决方案，至少有 三种 不同的方法可以解决这个问题。
 * 你可以使用空间复杂度为 O(1) 的 原地 算法解决这个问题吗？
 *
 * @author chengzhy
 * @date 2022/3/22 17:14
 */
public class P189_RotateArray {

    public void rotate(int[] nums, int k) {
        /**
         * 环状替换(原地算法)：先将倒数第k个数轮转k个位置，
         * 再将剩余未轮转的数中的倒数k(此处k %= n)个数轮转k个位置，直到k == 0停止循环
         *
         * 举个例子 nums = {1,2,3,4,5,6,7}, k = 4
         * 第一轮：先从需要向右轮转的n(n = 7)个数的倒数第4个数开始轮转，此时对应原数组中的4，操作后变为{4,5,6,7,2,3,1}，
         * 此时n -= k即n = 3，还剩下3个数仍需要向右轮转，对剩下3个数轮转k %= n即k = 1，即现在只需要轮转1个位置即可；
         *
         * 第二轮：先从需要向右轮转的n(n = 3)个数的倒数第1个数开始轮转，此时对应原数组中的1，操作后变为{4,5,6,7,1,3,2}，
         * 此时n -= k即n = 2，还剩下2个数仍需要向右轮转，对剩下2个数轮转k %= n即k = 1，即现在只需要轮转1个位置即可；
         *
         * 第三轮：先从需要向右轮转的n(n = 2)个数的倒数第1个数开始轮转，此时对应原数组中的2，操作后变为{4,5,6,7,1,2,3}，
         * 此时n -= k即n = 1，还剩下1个数仍需要向右轮转，对剩下1个数轮转k %= n即k = 0，此时就不用再进行轮转了，结束循环。
         */
        // start为被替换的起始位置，n为数组中仍需要向右轮转的个数
        int start = 0, n = nums.length;
        // k每次都对仍需要向右轮转的个数取余，得到真正需要轮转的步数
        while ((k %= n) != 0) {
            /**
             * 因为数组需要向右边轮转k个位置，那么就从仍需要向右轮转的数的倒数第k个数开始轮转
             * 因为采用的是原地算法，所以i = n - k + start用来对应原本数组中的位置
             */
            for (int i = n - k + start; i < nums.length; i++, start++) {
                // 交换
                int temp = nums[i];
                nums[i] = nums[start];
                nums[start] = temp;
            }
            // 因为上面操作轮转了k个数，因此还剩下n - k个数未轮转，更新n的值
            n -= k;
        }
    }

}
